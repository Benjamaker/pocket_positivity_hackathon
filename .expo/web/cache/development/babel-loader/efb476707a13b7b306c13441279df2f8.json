{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/DavidPapamichael/Coding/makers/week_13+/projects/hack_for_heroes/pocket_positivity_frontend/App.js\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport React, { useEffect, useState } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Login from \"./screens/Login\";\nimport useCachedResources from \"./hooks/useCachedResources\";\nimport BottomTabNavigator from \"./navigation/BottomTabNavigator\";\nimport LinkingConfiguration from \"./navigation/LinkingConfiguration\";\nvar Stack = createStackNavigator();\nexport default function App(props) {\n  var isLoadingComplete = useCachedResources();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      auth = _useState2[0],\n      setAuth = _useState2[1];\n\n  var showLogin = function showLogin() {\n    if (auth === true) {\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 9\n        }\n      }, Platform.OS === 'ios' && React.createElement(StatusBar, {\n        barStyle: \"dark-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 37\n        }\n      }), React.createElement(NavigationContainer, {\n        linking: LinkingConfiguration,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }\n      }, React.createElement(Stack.Navigator, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }\n      }, React.createElement(Stack.Screen, {\n        name: \"Root\",\n        component: BottomTabNavigator,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 15\n        }\n      }))));\n    } else {\n      return React.createElement(Login, {\n        setAuth: setAuth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 14\n        }\n      });\n    }\n  };\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    {\n      console.log(auth);\n    }\n    return showLogin();\n  }\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  }\n});","map":{"version":3,"sources":["/Users/DavidPapamichael/Coding/makers/week_13+/projects/hack_for_heroes/pocket_positivity_frontend/App.js"],"names":["NavigationContainer","createStackNavigator","React","useEffect","useState","Login","useCachedResources","BottomTabNavigator","LinkingConfiguration","Stack","App","props","isLoadingComplete","auth","setAuth","showLogin","styles","container","Platform","OS","console","log","StyleSheet","create","flex","backgroundColor"],"mappings":";;AAAA,SAASA,mBAAT,QAAoC,0BAApC;AACA,SAASC,oBAAT,QAAqC,yBAArC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;;;;AASA,OAAOC,KAAP;AAEA,OAAOC,kBAAP;AACA,OAAOC,kBAAP;AACA,OAAOC,oBAAP;AAGA,IAAMC,KAAK,GAAGR,oBAAoB,EAAlC;AAEA,eAAe,SAASS,GAAT,CAAaC,KAAb,EAAoB;AACjC,MAAMC,iBAAiB,GAAGN,kBAAkB,EAA5C;;AADiC,kBAETF,QAAQ,CAAC,KAAD,CAFC;AAAA;AAAA,MAE1BS,IAF0B;AAAA,MAEpBC,OAFoB;;AAejC,MAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB,QAAIF,IAAI,KAAK,IAAb,EAAmB;AACjB,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEG,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,IAAyB,oBAAC,SAAD;AAAW,QAAA,QAAQ,EAAC,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAD5B,EAEE,oBAAC,mBAAD;AAAqB,QAAA,OAAO,EAAEX,oBAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD,CAAO,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD,CAAO,MAAP;AAAc,QAAA,IAAI,EAAC,MAAnB;AAA0B,QAAA,SAAS,EAAED,kBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CAFF,CADF;AAUD,KAXD,MAWO;AACL,aAAO,oBAAC,KAAD;AAAO,QAAA,OAAO,EAAEO,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;AACF,GAfD;;AAiBA,MAAI,CAACF,iBAAL,EAAwB;AACtB,WAAO,IAAP;AACD,GAFD,MAEO;AACL;AACEQ,MAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;AACD;AACD,WAAOE,SAAS,EAAhB;AA4BD;AACF;AAED,IAAMC,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAC/BN,EAAAA,SAAS,EAAE;AACTO,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE;AAFR;AADoB,CAAlB,CAAf","sourcesContent":["import { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport React, { useEffect, useState } from 'react';\nimport {\n  Platform,\n  StatusBar,\n  Text,\n  Button,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport Login from './screens/Login';\n\nimport useCachedResources from './hooks/useCachedResources';\nimport BottomTabNavigator from './navigation/BottomTabNavigator';\nimport LinkingConfiguration from './navigation/LinkingConfiguration';\n// import * as AppAuth from 'expo-app-auth';\n\nconst Stack = createStackNavigator();\n\nexport default function App(props) {\n  const isLoadingComplete = useCachedResources();\n  const [auth, setAuth] = useState(false);\n\n  // let [authState, setAuthState] = useState(null);\n\n  // useEffect(() => {\n  //   (async () => {\n  //     let cachedAuth = await getCachedAuthAsync();\n  //     if (cachedAuth && !authState) {\n  //       setAuthState(cachedAuth);\n  //     }\n  //   })();\n  // }, []);\n\n  const showLogin = () => {\n    if (auth === true) {\n      return (\n        <View style={styles.container}>\n          {Platform.OS === 'ios' && <StatusBar barStyle=\"dark-content\" />}\n          <NavigationContainer linking={LinkingConfiguration}>\n            <Stack.Navigator>\n              <Stack.Screen name=\"Root\" component={BottomTabNavigator} />\n            </Stack.Navigator>\n          </NavigationContainer>\n        </View>\n      );\n    } else {\n      return <Login setAuth={setAuth} />;\n    }\n  };\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    {\n      console.log(auth);\n    }\n    return showLogin();\n    // <View style={styles.container}>\n    //   {Platform.OS === 'ios' && <StatusBar barStyle=\"dark-content\" />}\n    //   <NavigationContainer linking={LinkingConfiguration}>\n    //     <Stack.Navigator>\n    //       <Stack.Screen name=\"Root\" component={BottomTabNavigator} />\n    //     </Stack.Navigator>\n    //   </NavigationContainer>\n    // </View>\n    // <View style={styles.container}>\n    //   <Text>Expo AppAuth Example</Text>\n    //   <Button\n    //     title=\"Sign In with Google \"\n    //     onPress={async () => {\n    //       const _authState = await signInAsync();\n    //       setAuthState(_authState);\n    //     }}\n    //   />\n    //   <Button\n    //     title=\"Sign Out \"\n    //     onPress={async () => {\n    //       await signOutAsync(authState);\n    //       setAuthState(null);\n    //     }}\n    //   />\n    //   <Text>{JSON.stringify(authState, null, 2)}</Text>\n    // </View>\n    // );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n});\n\n// let config = {\n//   issuer: 'https://accounts.google.com',\n//   scopes: ['openid', 'profile'],\n//   /* This is the CLIENT_ID generated from a Firebase project */\n//   clientId:\n//     '603386649315-vp4revvrcgrcjme51ebuhbkbspl048l9.apps.googleusercontent.com',\n// };\n\n// let StorageKey = '@MyApp:CustomGoogleOAuthKey';\n\n// export async function signInAsync() {\n//   let authState = await AppAuth.authAsync(config);\n//   await cacheAuthAsync(authState);\n//   console.log('signInAsync', authState);\n//   return authState;\n// }\n\n// async function cacheAuthAsync(authState) {\n//   return await AsyncStorage.setItem(StorageKey, JSON.stringify(authState));\n// }\n\n// export async function getCachedAuthAsync() {\n//   let value = await AsyncStorage.getItem(StorageKey);\n//   let authState = JSON.parse(value);\n//   console.log('getCachedAuthAsync', authState);\n//   if (authState) {\n//     if (checkIfTokenExpired(authState)) {\n//       return refreshAuthAsync(authState);\n//     } else {\n//       return authState;\n//     }\n//   }\n//   return null;\n// }\n\n// function checkIfTokenExpired({ accessTokenExpirationDate }) {\n//   return new Date(accessTokenExpirationDate) < new Date();\n// }\n\n// async function refreshAuthAsync({ refreshToken }) {\n//   let authState = await AppAuth.refreshAsync(config, refreshToken);\n//   console.log('refreshAuth', authState);\n//   await cacheAuthAsync(authState);\n//   return authState;\n// }\n\n// export async function signOutAsync({ accessToken }) {\n//   try {\n//     await AppAuth.revokeAsync(config, {\n//       token: accessToken,\n//       isClientIdProvided: true,\n//     });\n//     await AsyncStorage.removeItem(StorageKey);\n//     return null;\n//   } catch (e) {\n//     alert(`Failed to revoke token: ${e.message}`);\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}