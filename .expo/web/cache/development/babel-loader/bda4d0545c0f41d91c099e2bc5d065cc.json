{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/DavidPapamichael/Coding/makers/week_13+/projects/hack_for_heroes/pocket_positivity_frontend/screens/MoodChart.js\";\nimport React, { useState, useEffect, useReducer } from 'react';\nimport { LineChart } from 'react-native-chart-kit';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { ScrollView } from 'react-native-gesture-handler';\nimport axios from 'axios';\n\nvar MoodChart = function MoodChart() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      labels = _useState4[0],\n      setLabels = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      value = _useState6[0],\n      setValue = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      everything = _useState8[0],\n      setEverything = _useState8[1];\n\n  useEffect(function () {\n    axios.get('https://help-for-heroes.herokuapp.com/scores/1').then(function (response) {\n      return getScores(response.data);\n    }).catch(function (error) {\n      console.error(error);\n    });\n  }, []);\n\n  var getScores = function getScores(response) {\n    var dataArray = [];\n    var labelsArray = [];\n    var everythingArray = [];\n    response.forEach(function (element) {\n      dataArray.push(element.score);\n      labelsArray.push(element.date.slice(0, 10));\n      everythingArray.push(element);\n    });\n    setData(dataArray);\n    setLabels(labelsArray);\n    setEverything(everythingArray);\n  };\n\n  var showComment = function showComment() {\n    if (value.value) {\n      for (var i = 0; i < everything.length; i++) {\n        if (everything[i].score_id === value.index + 1) {\n          return everything[i].comment;\n        }\n      }\n    }\n  };\n\n  var showDate = function showDate() {\n    if (value.value) {\n      for (var i = 0; i < everything.length; i++) {\n        if (everything[i].score_id === value.index + 1) {\n          return everything[i].date.slice(0, 10);\n        }\n      }\n    }\n  };\n\n  var renderChart = function renderChart() {\n    if (data.length === 0) {\n      return React.createElement(Text, {\n        style: {\n          fontStyle: 'italic',\n          fontWeight: 'bold',\n          textAlign: 'center',\n          fontSize: 18\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }\n      }, \"Loading...\");\n    } else {\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }\n      }, React.createElement(ScrollView, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontStyle: 'italic',\n          fontWeight: 'bold',\n          textAlign: 'center',\n          fontSize: 18\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }\n      }, \"Previous Mood Ratings and Comments\"), React.createElement(LineChart, {\n        key: 1,\n        data: {\n          labels: labels,\n          datasets: [{\n            data: data,\n            strokeWidth: 2\n          }]\n        },\n        width: Dimensions.get('window').width,\n        height: 425,\n        fromZero: true,\n        verticalLabelRotation: 70,\n        yAxisInterval: 1,\n        chartConfig: {\n          backgroundColor: 'rgb(255, 255, 255)',\n          backgroundGradientFrom: 'rgb(255, 255, 255)',\n          backgroundGradientTo: 'rgb(255, 255, 255)',\n          backgroundGradientFromOpacity: 0,\n          fillShadowGradient: 'rgb(255, 255, 255)',\n          fillShadowGradientOpacity: 0,\n          decimalPlaces: 0,\n          color: function color() {\n            var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.1;\n            return \"rgba(0,0,0, \" + opacity + \")\";\n          },\n          labelColor: function labelColor() {\n            var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.1;\n            return \"rgba(0, 0, 0, \" + opacity + \")\";\n          },\n          style: {\n            borderRadius: 16\n          },\n          propsForDots: {\n            r: '6',\n            strokeWidth: '6',\n            stroke: '#ADD8E6'\n          }\n        },\n        bezier: true,\n        style: {\n          marginVertical: 8,\n          borderRadius: 16\n        },\n        onDataPointClick: function onDataPointClick(value) {\n          setValue(value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }\n      })), React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }\n      }, showDate()), React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }\n      }, value.value), React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }\n      }, showComment()));\n    }\n  };\n\n  return renderChart();\n};\n\nexport default MoodChart;","map":{"version":3,"sources":["/Users/DavidPapamichael/Coding/makers/week_13+/projects/hack_for_heroes/pocket_positivity_frontend/screens/MoodChart.js"],"names":["React","useState","useEffect","useReducer","LineChart","ScrollView","axios","MoodChart","data","setData","labels","setLabels","value","setValue","everything","setEverything","get","then","response","getScores","catch","error","console","dataArray","labelsArray","everythingArray","forEach","element","push","score","date","slice","showComment","i","length","score_id","index","comment","showDate","renderChart","fontStyle","fontWeight","textAlign","fontSize","datasets","strokeWidth","Dimensions","width","backgroundColor","backgroundGradientFrom","backgroundGradientTo","backgroundGradientFromOpacity","fillShadowGradient","fillShadowGradientOpacity","decimalPlaces","color","opacity","labelColor","style","borderRadius","propsForDots","r","stroke","marginVertical"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer } from 'react';\nimport { LineChart } from 'react-native-chart-kit';\nimport { Text, View, Dimensions } from 'react-native';\nimport { ScrollView } from 'react-native-gesture-handler';\nimport axios from 'axios';\n\nconst MoodChart = () => {\n  const [data, setData] = useState([]);\n  const [labels, setLabels] = useState([]);\n  const [value, setValue] = useState('');\n  const [everything, setEverything] = useState('');\n\n  useEffect(() => {\n    axios\n      .get('https://help-for-heroes.herokuapp.com/scores/1')\n      .then((response) => getScores(response.data))\n      .catch((error) => {\n        console.error(error);\n      });\n  }, []);\n\n  const getScores = (response) => {\n    let dataArray = [];\n    let labelsArray = [];\n    let everythingArray = [];\n    response.forEach((element) => {\n      dataArray.push(element.score);\n      labelsArray.push(element.date.slice(0, 10));\n      everythingArray.push(element);\n    });\n    setData(dataArray);\n    setLabels(labelsArray);\n    setEverything(everythingArray);\n  };\n\n  const showComment = () => {\n    if (value.value) {\n      for (let i = 0; i < everything.length; i++) {\n        if (everything[i].score_id === value.index + 1) {\n          return everything[i].comment;\n        }\n      }\n    }\n  };\n\n  const showDate = () => {\n    if (value.value) {\n      for (let i = 0; i < everything.length; i++) {\n        if (everything[i].score_id === value.index + 1) {\n          return everything[i].date.slice(0, 10);\n        }\n      }\n    }\n  };\n\n  const renderChart = () => {\n    if (data.length === 0) {\n      return (\n        <Text\n          style={{\n            fontStyle: 'italic',\n            fontWeight: 'bold',\n            textAlign: 'center',\n            fontSize: 18,\n          }}\n        >\n          Loading...\n        </Text>\n      );\n    } else {\n      return (\n        <View>\n          <ScrollView>\n            <Text\n              style={{\n                fontStyle: 'italic',\n                fontWeight: 'bold',\n                textAlign: 'center',\n                fontSize: 18,\n              }}\n            >\n              Previous Mood Ratings and Comments\n            </Text>\n            <LineChart\n              key={1}\n              data={{\n                labels: labels,\n                datasets: [\n                  {\n                    data: data,\n                    strokeWidth: 2,\n                  },\n                ],\n              }}\n              width={Dimensions.get('window').width}\n              height={425}\n              fromZero={true}\n              verticalLabelRotation={70}\n              yAxisInterval={1}\n              chartConfig={{\n                backgroundColor: 'rgb(255, 255, 255)',\n                backgroundGradientFrom: 'rgb(255, 255, 255)',\n                backgroundGradientTo: 'rgb(255, 255, 255)',\n                backgroundGradientFromOpacity: 0,\n                fillShadowGradient: 'rgb(255, 255, 255)',\n                fillShadowGradientOpacity: 0,\n                decimalPlaces: 0,\n                color: (opacity = 0.1) => `rgba(0,0,0, ${opacity})`,\n                labelColor: (opacity = 0.1) => `rgba(0, 0, 0, ${opacity})`,\n                style: {\n                  borderRadius: 16,\n                },\n                propsForDots: {\n                  r: '6',\n                  strokeWidth: '6',\n                  stroke: '#ADD8E6',\n                },\n              }}\n              bezier\n              style={{\n                marginVertical: 8,\n                borderRadius: 16,\n              }}\n              onDataPointClick={(value) => {\n                setValue(value);\n              }}\n            />\n          </ScrollView>\n          <Text>{showDate()}</Text>\n          <Text>{value.value}</Text>\n          <Text>{showComment()}</Text>\n        </View>\n      );\n    }\n  };\n\n  return renderChart();\n};\n\nexport default MoodChart;\n"]},"metadata":{},"sourceType":"module"}