{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/DavidPapamichael/Coding/makers/week_13+/projects/hack_for_heroes/pocket_positivity_frontend/screens/NotificationsTest.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Vibration from \"react-native-web/dist/exports/Vibration\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Notifications, Device } from 'expo';\nimport * as Permissions from 'expo-permissions';\nimport { Button } from 'react-native-paper';\nimport Constants from 'expo-constants';\nimport axios from 'axios';\n\nvar AppContainer = function (_React$Component) {\n  _inherits(AppContainer, _React$Component);\n\n  var _super = _createSuper(AppContainer);\n\n  function AppContainer() {\n    var _this;\n\n    _classCallCheck(this, AppContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      expoPushToken: '',\n      notification: {},\n      mantra: ''\n    };\n\n    _this.registerForPushNotificationsAsync = function _callee() {\n      var _await$Permissions$ge, existingStatus, finalStatus, _await$Permissions$as, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!((Platform.OS === 'android' || Platform.OS === 'ios') && Constants.isDevice)) {\n                _context.next = 22;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n\n            case 3:\n              _await$Permissions$ge = _context.sent;\n              existingStatus = _await$Permissions$ge.status;\n              finalStatus = existingStatus;\n\n              if (!(existingStatus !== 'granted')) {\n                _context.next = 12;\n                break;\n              }\n\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n            case 9:\n              _await$Permissions$as = _context.sent;\n              status = _await$Permissions$as.status;\n              finalStatus = status;\n\n            case 12:\n              if (!(finalStatus !== 'granted')) {\n                _context.next = 15;\n                break;\n              }\n\n              alert('Failed to get push token for push notification!');\n              return _context.abrupt(\"return\");\n\n            case 15:\n              _context.next = 17;\n              return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n            case 17:\n              token = _context.sent;\n              console.log(token, 'this is the token');\n\n              _this.setState({\n                expoPushToken: token\n              });\n\n              _context.next = 23;\n              break;\n\n            case 22:\n              alert('Must use physical device for Push Notifications');\n\n            case 23:\n              if (Platform.OS === 'android') {\n                Notifications.createChannelAndroidAsync('default', {\n                  name: 'default',\n                  sound: true,\n                  priority: 'max',\n                  vibrate: [0, 250, 250, 250]\n                });\n              }\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.callMantras = function _callee2() {\n      var mantra;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(axios.get('https://help-for-heroes.herokuapp.com/mantras').then(function (response) {\n                return response.data;\n              }));\n\n            case 2:\n              mantra = _context2.sent;\n\n              _this.setState({\n                mantra: mantra\n              });\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.setNotificationTimerHour = function () {\n      Notifications.scheduleLocalNotificationAsync({\n        title: 'the title',\n        body: _this.filterMantra(_this.state.mantra)\n      }, {\n        time: new Date().getTime() + 3600000,\n        repeat: 'hour'\n      });\n    };\n\n    _this.setNotificationTimerDay = function () {\n      Notifications.scheduleLocalNotificationAsync({\n        title: 'the title',\n        body: _this.filterMantra(_this.state.mantra)\n      }, {\n        time: new Date().getTime() + 86400000,\n        repeat: 'day'\n      });\n    };\n\n    _this.cancelNotificationTimers = function () {\n      Notifications.cancelAllScheduledNotificationsAsync();\n    };\n\n    _this._handleNotification = function (notification) {\n      Vibration.vibrate();\n      console.log(notification), 'this is the notification';\n\n      _this.setState({\n        notification: notification\n      });\n    };\n\n    _this.filterMantra = function (array) {\n      var rand = Math.random();\n      var arrayLength = array.length;\n      var randIndex = Math.floor(rand * arrayLength);\n      var randomMantra = array[randIndex].mantra;\n      return randomMantra;\n    };\n\n    _this.sendPushNotification = function _callee3() {\n      var message, response;\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              message = {\n                owner: 'me',\n                slug: 'this is the slugg',\n                to: _this.state.expoPushToken,\n                sound: 'default',\n                title: 'Mantra Reminder',\n                body: _this.filterMantra(_this.state.mantra),\n                data: {\n                  data: 'goes here'\n                },\n                _displayInForeground: true\n              };\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(fetch('https://exp.host/--/api/v2/push/send', {\n                method: 'POST',\n                headers: {\n                  Accept: 'application/json',\n                  'Accept-encoding': 'gzip, deflate',\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(message)\n              }));\n\n            case 3:\n              response = _context3.sent;\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(AppContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.registerForPushNotificationsAsync();\n      this.callMantras();\n      this._notificationSubscription = Notifications.addListener(this._handleNotification);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: {\n          flex: 1,\n          alignItems: 'center',\n          justifyContent: 'space-around'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 7\n        }\n      }, React.createElement(Button, {\n        icon: \"camera\",\n        mode: \"contained\",\n        onPress: function onPress() {\n          return _this2.sendPushNotification();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 9\n        }\n      }, \"Give me a Random Mantra\"), React.createElement(Button, {\n        icon: \"clock-fast\",\n        mode: \"contained\",\n        onPress: function onPress() {\n          return _this2.setNotificationTimerHour();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 9\n        }\n      }, \"Send Me a Mantra In an Hour\"), React.createElement(Button, {\n        icon: \"calendar-clock\",\n        mode: \"contained\",\n        onPress: function onPress() {\n          return _this2.setNotificationTimerDay();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 9\n        }\n      }, \"Send me a Mantra in a Day\"), React.createElement(Button, {\n        icon: \"cancel\",\n        mode: \"contained\",\n        onPress: function onPress() {\n          return _this2.cancelNotificationTimers();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 9\n        }\n      }, \"Cancel all my notifications\"));\n    }\n  }]);\n\n  return AppContainer;\n}(React.Component);\n\nexport { AppContainer as default };","map":{"version":3,"sources":["/Users/DavidPapamichael/Coding/makers/week_13+/projects/hack_for_heroes/pocket_positivity_frontend/screens/NotificationsTest.js"],"names":["React","Notifications","Device","Permissions","Button","Constants","axios","AppContainer","state","expoPushToken","notification","mantra","registerForPushNotificationsAsync","Platform","OS","isDevice","getAsync","NOTIFICATIONS","existingStatus","status","finalStatus","askAsync","alert","getExpoPushTokenAsync","token","console","log","setState","createChannelAndroidAsync","name","sound","priority","vibrate","callMantras","get","then","response","data","setNotificationTimerHour","scheduleLocalNotificationAsync","title","body","filterMantra","time","Date","getTime","repeat","setNotificationTimerDay","cancelNotificationTimers","cancelAllScheduledNotificationsAsync","_handleNotification","Vibration","array","rand","Math","random","arrayLength","length","randIndex","floor","randomMantra","sendPushNotification","message","owner","slug","to","_displayInForeground","fetch","method","headers","Accept","JSON","stringify","_notificationSubscription","addListener","flex","alignItems","justifyContent","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Text, View, Vibration, Platform } from 'react-native';\nimport { Notifications, Device } from 'expo';\nimport * as Permissions from 'expo-permissions';\nimport { Button } from 'react-native-paper';\nimport Constants from 'expo-constants';\nimport axios from 'axios';\n\nexport default class AppContainer extends React.Component {\n  state = {\n    expoPushToken: '',\n    notification: {},\n    mantra: '',\n  };\n\n  registerForPushNotificationsAsync = async () => {\n    if (\n      (Platform.OS === 'android' || Platform.OS === 'ios') &&\n      Constants.isDevice\n    ) {\n      const { status: existingStatus } = await Permissions.getAsync(\n        Permissions.NOTIFICATIONS\n      );\n      let finalStatus = existingStatus;\n      if (existingStatus !== 'granted') {\n        const { status } = await Permissions.askAsync(\n          Permissions.NOTIFICATIONS\n        );\n        finalStatus = status;\n      }\n      if (finalStatus !== 'granted') {\n        alert('Failed to get push token for push notification!');\n        return;\n      }\n      token = await Notifications.getExpoPushTokenAsync();\n      console.log(token, 'this is the token');\n      this.setState({ expoPushToken: token });\n    } else {\n      alert('Must use physical device for Push Notifications');\n    }\n\n    if (Platform.OS === 'android') {\n      Notifications.createChannelAndroidAsync('default', {\n        name: 'default',\n        sound: true,\n        priority: 'max',\n        vibrate: [0, 250, 250, 250],\n      });\n    }\n  };\n\n  componentDidMount() {\n    this.registerForPushNotificationsAsync();\n    this.callMantras();\n\n    // Handle notifications that are received or selected while the app\n    // is open. If the app was closed and then opened by tapping the\n    // notification (rather than just tapping the app icon to open it),\n    // this function will fire on the next tick after the app starts\n    // with the notification data.\n    this._notificationSubscription = Notifications.addListener(\n      this._handleNotification\n    );\n  }\n\n  callMantras = async () => {\n    const mantra = await axios\n      .get('https://help-for-heroes.herokuapp.com/mantras')\n      .then((response) => {\n        return response.data;\n      });\n\n    this.setState({ mantra: mantra });\n  };\n\n  setNotificationTimerHour = () => {\n    Notifications.scheduleLocalNotificationAsync(\n      { title: 'the title', body: this.filterMantra(this.state.mantra) },\n      { time: new Date().getTime() + 3600000, repeat: 'hour' }\n    );\n  };\n\n  setNotificationTimerDay = () => {\n    Notifications.scheduleLocalNotificationAsync(\n      { title: 'the title', body: this.filterMantra(this.state.mantra) },\n      { time: new Date().getTime() + 86400000, repeat: 'day' }\n    );\n  };\n\n  cancelNotificationTimers = () => {\n    Notifications.cancelAllScheduledNotificationsAsync();\n  };\n\n  _handleNotification = (notification) => {\n    Vibration.vibrate();\n    console.log(notification), 'this is the notification';\n    this.setState({ notification: notification });\n  };\n\n  filterMantra = (array) => {\n    let rand = Math.random();\n    let arrayLength = array.length;\n    let randIndex = Math.floor(rand * arrayLength);\n    let randomMantra = array[randIndex].mantra;\n    return randomMantra;\n  };\n\n  // Can use this function below, OR use Expo's Push Notification Tool-> https://expo.io/dashboard/notifications\n  sendPushNotification = async () => {\n    // const realMantra = this.filterMantra(this.state.mantra);\n    const message = {\n      owner: 'me',\n      slug: 'this is the slugg',\n      to: this.state.expoPushToken,\n      sound: 'default',\n      title: 'Mantra Reminder',\n      body: this.filterMantra(this.state.mantra),\n      data: { data: 'goes here' },\n      _displayInForeground: true,\n    };\n    const response = await fetch('https://exp.host/--/api/v2/push/send', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Accept-encoding': 'gzip, deflate',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(message),\n    });\n  };\n\n  render() {\n    return (\n      <View\n        style={{\n          flex: 1,\n          alignItems: 'center',\n          justifyContent: 'space-around',\n        }}\n      >\n        <Button\n          icon=\"camera\"\n          mode=\"contained\"\n          onPress={() => this.sendPushNotification()}\n        >\n          Give me a Random Mantra\n        </Button>\n        <Button\n          icon=\"clock-fast\"\n          mode=\"contained\"\n          onPress={() => this.setNotificationTimerHour()}\n        >\n          Send Me a Mantra In an Hour\n        </Button>\n        <Button\n          icon=\"calendar-clock\"\n          mode=\"contained\"\n          onPress={() => this.setNotificationTimerDay()}\n        >\n          Send me a Mantra in a Day\n        </Button>\n        <Button\n          icon=\"cancel\"\n          mode=\"contained\"\n          onPress={() => this.cancelNotificationTimers()}\n        >\n          Cancel all my notifications\n        </Button>\n      </View>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}